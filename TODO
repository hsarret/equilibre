x=84
y=210
z=0
//if(actor && (i == 1754))

const vec3 gravity(0.0, 0.0, -9.8);
state.position = state + (gravity * dt);

collision from +Z side of the 0, 0, 1 plane
    Collision with player (0.000000, 213.186890, 1.484302) at (0.000000, 213.186890, -0.515698) normal (0.000000, 0.000000, 1.000000) depth 0.515698 d1 -1.484302 d2 0.515698 side 1.484302
    Collision with player (0.000000, 213.733612, 1.371075) at (0.000000, 213.733612, -0.628925) normal (0.000000, 0.000000, 1.000000) depth 0.628925 d1 -1.371075 d2 0.628925 side 1.371075
    Collision with player (0.000000, 214.280334, 1.371075) at (0.000000, 214.280334, -0.628925) normal (0.000000, 0.000000, 1.000000) depth 0.628925 d1 -1.371075 d2 0.628925 side 1.371075
    Collision with player (0.000000, 214.827057, 1.371075) at (0.000000, 214.827057, -0.628925) normal (0.000000, 0.000000, 1.000000) depth 0.628925 d1 -1.371075 d2 0.628925 side 1.371075
    Collision with player (0.000000, 215.373779, 1.371075) at (0.000000, 215.373779, -0.628925) normal (0.000000, 0.000000, 1.000000) depth 0.628925 d1 -1.371075 d2 0.628925 side 1.371075
    Collision with player (0.000000, 215.920502, 1.371075) at (0.000000, 215.920502, -0.628925) normal (0.000000, 0.000000, 1.000000) depth 0.628925 d1 -1.371075 d2 0.628925 side 1.371075
    
    originalPos
    
    Collision with player (-0.201598, 212.037155, 1.734231) at (-0.201598, 212.037155, -0.265769) normal (0.000000, 0.000000, 1.000000) depth 0.265769 d1 -1.734231 d2 0.265769 side 2.489487
    Collision with player (-0.268798, 212.382874, 1.244744) at (-0.268798, 212.382874, -0.755256) normal (0.000000, 0.000000, 1.000000) depth 0.755256 d1 -1.244744 d2 0.755256 side 2.000000
    Collision with player (-0.335997, 212.728592, 1.244744) at (-0.335997, 212.728592, -0.755256) normal (0.000000, 0.000000, 1.000000) depth 0.755256 d1 -1.244744 d2 0.755256 side 2.000000
    Collision with player (-0.403197, 213.074310, 1.244744) at (-0.403197, 213.074310, -0.755256) normal (0.000000, 0.000000, 1.000000) depth 0.755256 d1 -1.244744 d2 0.755256 side 2.000000
    Collision with player (-0.470396, 213.420029, 1.244744) at (-0.470396, 213.420029, -0.755256) normal (0.000000, 0.000000, 1.000000) depth 0.755256 d1 -1.244744 d2 0.755256 side 2.000000
    Collision with player (-0.537596, 213.765747, 1.244744) at (-0.537596, 213.765747, -0.755256) normal (0.000000, 0.000000, 1.000000) depth 0.755256 d1 -1.244744 d2 0.755256 side 2.000000


collision from -Y side of the 0, 265, 0 plane
    Collision with player (0.000000, 261.833130, 4.000000) at (0.000000, 260.833130, 5.000000) normal (0.000000, 1.000000, 0.000000) depth 4.166870 d1 3.166870 d2 4.166870 side -3.166870 
    Collision with player (0.000000, 262.666473, 4.000000) at (0.000000, 261.666473, 5.000000) normal (0.000000, 1.000000, 0.000000) depth 3.333527 d1 2.333527 d2 3.333527 side -2.333527 
    Collision with player (0.000000, 263.499817, 4.000000) at (0.000000, 262.499817, 5.000000) normal (0.000000, 1.000000, 0.000000) depth 2.500183 d1 1.500183 d2 2.500183 side -1.500183 
    Collision with player (0.000000, 264.333160, 4.000000) at (0.000000, 263.333160, 5.000000) normal (0.000000, 1.000000, 0.000000) depth 1.666840 d1 0.666840 d2 1.666840 side -0.666840 
    Collision with player (0.000000, 265.166504, 4.000000) at (0.000000, 264.166504, 5.000000) normal (0.000000, 1.000000, 0.000000) depth 0.833496 d1 -0.166504 d2 0.833496 side 0.166504 


collision from +Y side of the 0, 265, 0 plane
    pos -37 264.863 3.82
    depth 0.136
    side1 -1
    side2 -1

Material palettes:
    Keep them in a list
    Enforce one MaterialArray per draw call (beginDraw/endDraw)
    use vertex texture fetch instead of uniform array
    do the animation in the vertex shader so we don't need to upload it every frame
    use 3D textures for animated textures so we can easily interpolate between frames?
pimpl for RenderProgram
    have Game create shader programs?
lights
    fix them
sort items front to back
Draw opaque materials and then masked materials
one frame latency for querying GL timers and remove glFinish
No unbind / do unbind at the end of the frame (use VAOs?)
physics/collisions
play XMI music and WAV sounds
Load file for mapping animations to characters
start animation when selecting it (remember the time when it was first selected)
mimic character selection screen (load character selection background and rotate, random animation)
split animation tracks into two lists (skinning, positioning) and renumber piece IDs (to reduce the size of the uniform array).
import item animations (gequip.s3d)
fix Luclin/PoP skinning artefacts

fix 213462fe17828c1468cb39d6653da8816aea667f (Implementing a zone viewer 03/072011) that broke BAF helm/hair

transparency/mask misses
    IT555 (gequip4)
Unknown render mode 7, a, 14, b, 9
Document required extensions
    ARB_texture_swizzle
